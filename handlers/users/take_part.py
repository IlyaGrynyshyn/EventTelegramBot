from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, LabeledPrice
from data import config
from keyboards.default import menu
from keyboards.inline import type_of_visit
from loader import dp, db, bot
from data.items import item1
from states.will_online_state import Will_Online


@dp.message_handler(text='ü§ù –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å')
async def take_part(message: types.Message):
    await message.answer('ü§î –Ø–∫ —Ç–∏ –ø–ª–∞–Ω—É—î—à –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏', reply_markup=type_of_visit)


@dp.callback_query_handler(lambda c: c.data == 'will_come')
async def will_come(call: CallbackQuery):
    db.update_type_visit('offline', call.from_user.id)
    await call.message.answer(
        f'üôå –°—É–ø–µ—Ä, –≤—Ö—ñ–¥–Ω–∏–π –∫–≤–∏—Ç–æ–∫ –±—É–¥–µ –∫–æ—à—Ç—É–≤–∞—Ç–∏ 700 –≥—Ä–∏–≤–µ–Ω—å.\n'
        f'üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∏–∂—á–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏', reply_markup=menu
    )
    await call.answer(cache_time=30)
    await bot.send_invoice(call.from_user.id,
                           **item1.generate_invoice(), payload='123')


@dp.callback_query_handler(lambda c: c.data == 'will_online')
async def will_online(call: CallbackQuery):
    await call.answer(cache_time=30)
    db.update_type_visit('online', call.from_user.id)
    await call.message.answer(
        f'\n\n–¶—ñ–Ω–∞ –¥–ª—è –∫–≤–∏—Ç–∫–∞ –≤—ñ–ª—å–Ω–∞. –í–∏ –ø–ª–∞—Ç–∏—Ç–∏ —Å–∫—ñ–ª—å–∫–∏ –≤–≤–∞–∂–∞—î—Ç–µ –∑–∞ –ø–æ—Ç—Ä—ñ–±–Ω–µ. '
        f'\n\n–ù–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ —Å–∫—ñ–ª—å–∫–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–ø–ª–∞—Ç–∏—Ç–∏', reply_markup=types.ReplyKeyboardRemove())
    await Will_Online.Q1.set()


@dp.message_handler(state=Will_Online.Q1)
async def get_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        formating = int(str(amount) + "00")
        if amount < 49:
            await message.answer('–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º—É 50 –≥—Ä–Ω')
        else:
            await state.update_data(amount=amount)
            await bot.send_invoice(message.from_user.id,
                                   title='–ö–≤–∏—Ç–æ–∫ –æ–Ω–ª–∞–π–Ω "The Power of Identity"',
                                   currency="UAH",
                                   description='–í—Ö—ñ–¥–Ω–∏–π –∫–≤–∏—Ç–æ–∫ –Ω–∞ –æ–Ω–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø –∑–∞—Ö–æ–¥—É "The Power of Identity"',
                                   prices=[
                                       LabeledPrice(
                                           label='–í—Ö—ñ–¥–Ω–∏–π –∫–≤–∏—Ç–æ–∫',
                                           amount=formating
                                       )
                                   ], start_parameter='create_invoice_will_come',
                                   need_phone_number=True,
                                   provider_token=config.PROVIDER_TOKEN,
                                   payload='11223')
            await message.answer(f'–í–∏ –≤–∏–±—Ä–∞—Ç–∏ {amount} –≥—Ä–Ω', reply_markup=menu)
            await state.finish()
    except ValueError:
        await message.answer('–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É. ')


@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)
    db.update_is_pay(query.from_user.id)
    message_text = '–î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É –∫–≤–∏—Ç–∫–∞!\n\nü§ó –ú–∏ —Ä–∞–¥—ñ, —â–æ –≤–∏ –ø—Ä–∏—î–¥–Ω–∞—î—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –∑–∞—Ö–æ–¥—É.\n\n–¢–µ–ø–µ—Ä –≤–∞—à –∫–≤–∏—Ç–æ–∫ üéüÔ∏è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ "–ú—ñ–π –∫–≤–∏—Ç–æ–∫"'
    await bot.send_message(chat_id=query.from_user.id, text=message_text, reply_markup=menu)
